type User {
    username: String!
    first_name: String!
    last_name: String!
    password: String!
    email: String!
    terms: Boolean!
    is_active: Boolean!
    is_deleted: Boolean!
    _updated_at: String!
    _created_at: String!
    role: String!
}

input UserInput {
    username: String!
    password: String!
    first_name: String!
    last_name: String!
    email: String!
    terms: Boolean!
}

input GoogleAuthInput {
    idToken: String!
}

input LoginInput {
    username: String!
    password: String!
}

type Query {
    getUser(id: ID!): User!
    getUsers(amount: Int): [User]
}

type Mutation {
    createUser(userInput: UserInput!): AuthPayload!
    loginUser(loginInput: LoginInput!): AuthPayload!
    googleAuth(googleAuthInput: GoogleAuthInput!): AuthPayload!
    refreshToken: AuthPayload!
}

type AuthPayload {
    accessToken: String!
}

